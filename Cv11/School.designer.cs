#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CV11_LINQ_TO_SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="School")]
	public partial class SchoolDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    partial void InsertSignedSubject(SignedSubject instance);
    partial void UpdateSignedSubject(SignedSubject instance);
    partial void DeleteSignedSubject(SignedSubject instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    #endregion
		
		public SchoolDataContext() : 
				base(global::CV11_LINQ_TO_SQL.Properties.Settings.Default.SchoolConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Rating> Ratings
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
		
		public System.Data.Linq.Table<SignedSubject> SignedSubjects
		{
			get
			{
				return this.GetTable<SignedSubject>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Quantity> Quantities
		{
			get
			{
				return this.GetTable<Quantity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ratings")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _PersonSub;
		
		private System.Nullable<System.DateTime> _DateofRate;
		
		private System.Nullable<double> _Rating1;
		
		private EntityRef<SignedSubject> _SignedSubject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonSubChanging(System.Nullable<int> value);
    partial void OnPersonSubChanged();
    partial void OnDateofRateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateofRateChanged();
    partial void OnRating1Changing(System.Nullable<double> value);
    partial void OnRating1Changed();
    #endregion
		
		public Rating()
		{
			this._SignedSubject = default(EntityRef<SignedSubject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonSub", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> PersonSub
		{
			get
			{
				return this._PersonSub;
			}
			set
			{
				if ((this._PersonSub != value))
				{
					if (this._SignedSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonSubChanging(value);
					this.SendPropertyChanging();
					this._PersonSub = value;
					this.SendPropertyChanged("PersonSub");
					this.OnPersonSubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateofRate", DbType="Date")]
		public System.Nullable<System.DateTime> DateofRate
		{
			get
			{
				return this._DateofRate;
			}
			set
			{
				if ((this._DateofRate != value))
				{
					this.OnDateofRateChanging(value);
					this.SendPropertyChanging();
					this._DateofRate = value;
					this.SendPropertyChanged("DateofRate");
					this.OnDateofRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Rating", Storage="_Rating1", DbType="Float")]
		public System.Nullable<double> Rating1
		{
			get
			{
				return this._Rating1;
			}
			set
			{
				if ((this._Rating1 != value))
				{
					this.OnRating1Changing(value);
					this.SendPropertyChanging();
					this._Rating1 = value;
					this.SendPropertyChanged("Rating1");
					this.OnRating1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignedSubject_Rating", Storage="_SignedSubject", ThisKey="PersonSub", OtherKey="PersonSub", IsForeignKey=true)]
		public SignedSubject SignedSubject
		{
			get
			{
				return this._SignedSubject.Entity;
			}
			set
			{
				SignedSubject previousValue = this._SignedSubject.Entity;
				if (((previousValue != value) 
							|| (this._SignedSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SignedSubject.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._SignedSubject.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._PersonSub = value.PersonSub;
					}
					else
					{
						this._PersonSub = default(Nullable<int>);
					}
					this.SendPropertyChanged("SignedSubject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignedSubjects")]
	public partial class SignedSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonSub;
		
		private System.Nullable<int> _ID;
		
		private string _Shortage;
		
		private EntitySet<Rating> _Ratings;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonSubChanging(int value);
    partial void OnPersonSubChanged();
    partial void OnIDChanging(System.Nullable<int> value);
    partial void OnIDChanged();
    partial void OnShortageChanging(string value);
    partial void OnShortageChanged();
    #endregion
		
		public SignedSubject()
		{
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._Student = default(EntityRef<Student>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonSub", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PersonSub
		{
			get
			{
				return this._PersonSub;
			}
			set
			{
				if ((this._PersonSub != value))
				{
					this.OnPersonSubChanging(value);
					this.SendPropertyChanging();
					this._PersonSub = value;
					this.SendPropertyChanged("PersonSub");
					this.OnPersonSubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shortage", DbType="VarChar(50)", CanBeNull=false)]
		public string Shortage
		{
			get
			{
				return this._Shortage;
			}
			set
			{
				if ((this._Shortage != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShortageChanging(value);
					this.SendPropertyChanging();
					this._Shortage = value;
					this.SendPropertyChanged("Shortage");
					this.OnShortageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignedSubject_Rating", Storage="_Ratings", ThisKey="PersonSub", OtherKey="PersonSub")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_SignedSubject", Storage="_Student", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.SignedSubjects.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.SignedSubjects.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SignedSubject", Storage="_Subject", ThisKey="Shortage", OtherKey="Shortage", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.SignedSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.SignedSubjects.Add(this);
						this._Shortage = value.Shortage;
					}
					else
					{
						this._Shortage = default(string);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.SignedSubject = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.SignedSubject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FirstName;
		
		private string _SurName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private int _ID;
		
		private EntitySet<SignedSubject> _SignedSubjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurNameChanging(string value);
    partial void OnSurNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Student()
		{
			this._SignedSubjects = new EntitySet<SignedSubject>(new Action<SignedSubject>(this.attach_SignedSubjects), new Action<SignedSubject>(this.detach_SignedSubjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="VarChar(70)")]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this.OnSurNameChanging(value);
					this.SendPropertyChanging();
					this._SurName = value;
					this.SendPropertyChanged("SurName");
					this.OnSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_SignedSubject", Storage="_SignedSubjects", ThisKey="ID", OtherKey="ID")]
		public EntitySet<SignedSubject> SignedSubjects
		{
			get
			{
				return this._SignedSubjects;
			}
			set
			{
				this._SignedSubjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SignedSubjects(SignedSubject entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_SignedSubjects(SignedSubject entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Shortage;
		
		private string _SubName;
		
		private EntitySet<SignedSubject> _SignedSubjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShortageChanging(string value);
    partial void OnShortageChanged();
    partial void OnSubNameChanging(string value);
    partial void OnSubNameChanged();
    #endregion
		
		public Subject()
		{
			this._SignedSubjects = new EntitySet<SignedSubject>(new Action<SignedSubject>(this.attach_SignedSubjects), new Action<SignedSubject>(this.detach_SignedSubjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shortage", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Shortage
		{
			get
			{
				return this._Shortage;
			}
			set
			{
				if ((this._Shortage != value))
				{
					this.OnShortageChanging(value);
					this.SendPropertyChanging();
					this._Shortage = value;
					this.SendPropertyChanged("Shortage");
					this.OnShortageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubName", DbType="VarChar(70)")]
		public string SubName
		{
			get
			{
				return this._SubName;
			}
			set
			{
				if ((this._SubName != value))
				{
					this.OnSubNameChanging(value);
					this.SendPropertyChanging();
					this._SubName = value;
					this.SendPropertyChanged("SubName");
					this.OnSubNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SignedSubject", Storage="_SignedSubjects", ThisKey="Shortage", OtherKey="Shortage")]
		public EntitySet<SignedSubject> SignedSubjects
		{
			get
			{
				return this._SignedSubjects;
			}
			set
			{
				this._SignedSubjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SignedSubjects(SignedSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_SignedSubjects(SignedSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quantity")]
	public partial class Quantity
	{
		
		private string _Shortage;
		
		private System.Nullable<int> _NumOfStudents;
		
		public Quantity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shortage", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Shortage
		{
			get
			{
				return this._Shortage;
			}
			set
			{
				if ((this._Shortage != value))
				{
					this._Shortage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfStudents", DbType="Int")]
		public System.Nullable<int> NumOfStudents
		{
			get
			{
				return this._NumOfStudents;
			}
			set
			{
				if ((this._NumOfStudents != value))
				{
					this._NumOfStudents = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
